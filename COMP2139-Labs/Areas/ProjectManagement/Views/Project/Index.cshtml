@*Indicate that the view expects a list of project objects as its model*@
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model List<Project>

@{
    ViewBag.Title = "Project Listing";
    Layout = "_Layout";
    bool searchPerformed = ViewData["SearchPerformed"] as bool? ?? false;
    string searchString = ViewData["SearchString"] as string;
}

<h2>project Listing</h2>
<a asp-action="Create" class="btn btn-primary">Create new project</a>
@if (Model.Any())
{
    //iterate over projects
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Summary</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in Model)
        {
            <tr>
                <td>@project.ProjectId</td>
                <td><p>@Html.DisplayFor(model =>project.Name,"ProjectName")</p></td>
                <td><p>@Html.DisplayFor(model =>project.Description,"ProjectDescription")</p></td>
                <!-- Call reusable view component-->
                <td>
                    @await Component.InvokeAsync("ProjectSummary", new {projectId=project.ProjectId})
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@project.ProjectId" class="btn btn-info">Details</a>
                    <a asp-action="Edit" asp-route-id="@project.ProjectId" class="btn btn-warning">Edit</a>
                    <a asp-action="Delete" asp-route-id="@project.ProjectId" class="btn btn-danger">Delete</a>
                    <a asp-controller="ProjectTask" asp-action="Index" asp-route-id="@project.ProjectId" class="btn btn-secondary">Tasks</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    
}
else
{
    if (searchPerformed)
    {
        <p>No projects with string "@searchString" were found</p>
    }
    else
    {
        <p>No projects available</p>
    }
    
}